{"ast":null,"code":"// import React, { useState } from \"react\";\n// Firebase App (the core Firebase SDK) is always required and must be listed first\nimport firebase from \"firebase/app\"; // Add the Firebase products that you want to use\n\nimport \"firebase/storage\";\nimport \"firebase/firestore\"; // Define database config\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAgTY6i0_P4d6lKuT-6D5tJQRK3T4mQ1sU\",\n  authDomain: \"lexical-acolyte-304913.firebaseapp.com\",\n  projectId: \"lexical-acolyte-304913\",\n  storageBucket: \"lexical-acolyte-304913.appspot.com\",\n  messagingSenderId: \"611796077490\",\n  appId: \"1:611796077490:web:d8931e7d286835527572ab\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig); // Get a reference to the storage service, which is used to create references in your storage bucket\n\nvar storage = firebase.storage(); // Get a reference to the storage service, which is used to create references in your storage bucket\n\nvar firestore = firebase.firestore(); // Get all of  my ticket data\n// const [allTickets, setAllTickets] = useState([]);\n// const tickets = [];\n// firestore.collection(\"ticketreader\").doc(\"ticketreader\").collection(\"tickets\")\n//     .then(snapshot => {\n//         snapshot.docs.forEach(ticket => {\n//             let currentID = ticket.id;\n//             console.log(\"Id: \" + currentID);\n//             let appObj = { ...ticket.data(), ['id']: currentID }\n//             tickets.push(appObj);\n//             tickets.push(ticket.data());\n//         })\n//     });\n\nvar netWorth = \"data\"; // firestore.doc(\"ticketreader/netValue\").get()\n//     .then(snapshot => {\n//         console.log(\"Snapshot: \" + snapshot.exists)\n//         netWorth = snapshot;\n//     });\n\nconst snapshot = firestore.collection('ticketreader/').get();\nsnapshot.then(snap => {\n  snap.forEach(doc => {\n    console.log(doc.id, '=>', doc.data());\n    netWorth = doc.data().netValue;\n    console.log(netWorth);\n  });\n});\nexport default netWorth; // export default netWorth;","map":{"version":3,"sources":["/Users/JuanCarlos/react-file-uploader/client/src/data/firebaseTransactions.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","initializeApp","storage","firestore","netWorth","snapshot","collection","get","then","snap","forEach","doc","console","log","id","data","netValue"],"mappings":"AAAA;AACA;AACA,OAAOA,QAAP,MAAqB,cAArB,C,CAEA;;AACA,OAAO,kBAAP;AACA,OAAO,oBAAP,C,CAEA;;AACA,IAAIC,cAAc,GAAG;AACjBC,EAAAA,MAAM,EAAE,yCADS;AAEjBC,EAAAA,UAAU,EAAE,wCAFK;AAGjBC,EAAAA,SAAS,EAAE,wBAHM;AAIjBC,EAAAA,aAAa,EAAE,oCAJE;AAKjBC,EAAAA,iBAAiB,EAAE,cALF;AAMjBC,EAAAA,KAAK,EAAE;AANU,CAArB,C,CAQA;;AACAP,QAAQ,CAACQ,aAAT,CAAuBP,cAAvB,E,CAEA;;AACA,IAAIQ,OAAO,GAAGT,QAAQ,CAACS,OAAT,EAAd,C,CAEA;;AACA,IAAIC,SAAS,GAAGV,QAAQ,CAACU,SAAT,EAAhB,C,CAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AACA,IAAIC,QAAQ,GAAG,MAAf,C,CACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAGF,SAAS,CAACG,UAAV,CAAqB,eAArB,EAAsCC,GAAtC,EAAjB;AACAF,QAAQ,CAACG,IAAT,CAAcC,IAAI,IAAI;AAClBA,EAAAA,IAAI,CAACC,OAAL,CAAaC,GAAG,IAAI;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,EAAhB,EAAoB,IAApB,EAA0BH,GAAG,CAACI,IAAJ,EAA1B;AACAX,IAAAA,QAAQ,GAAGO,GAAG,CAACI,IAAJ,GAAWC,QAAtB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACH,GAJD;AAKH,CAND;AAUA,eAAeA,QAAf,C,CACA","sourcesContent":["// import React, { useState } from \"react\";\n// Firebase App (the core Firebase SDK) is always required and must be listed first\nimport firebase from \"firebase/app\";\n\n// Add the Firebase products that you want to use\nimport \"firebase/storage\";\nimport \"firebase/firestore\";\n\n// Define database config\nvar firebaseConfig = {\n    apiKey: \"AIzaSyAgTY6i0_P4d6lKuT-6D5tJQRK3T4mQ1sU\",\n    authDomain: \"lexical-acolyte-304913.firebaseapp.com\",\n    projectId: \"lexical-acolyte-304913\",\n    storageBucket: \"lexical-acolyte-304913.appspot.com\",\n    messagingSenderId: \"611796077490\",\n    appId: \"1:611796077490:web:d8931e7d286835527572ab\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// Get a reference to the storage service, which is used to create references in your storage bucket\nvar storage = firebase.storage();\n\n// Get a reference to the storage service, which is used to create references in your storage bucket\nvar firestore = firebase.firestore();\n\n// Get all of  my ticket data\n// const [allTickets, setAllTickets] = useState([]);\n\n// const tickets = [];\n\n// firestore.collection(\"ticketreader\").doc(\"ticketreader\").collection(\"tickets\")\n//     .then(snapshot => {\n//         snapshot.docs.forEach(ticket => {\n//             let currentID = ticket.id;\n//             console.log(\"Id: \" + currentID);\n\n//             let appObj = { ...ticket.data(), ['id']: currentID }\n\n//             tickets.push(appObj);\n//             tickets.push(ticket.data());\n//         })\n//     });\nvar netWorth = \"data\";\n// firestore.doc(\"ticketreader/netValue\").get()\n//     .then(snapshot => {\n//         console.log(\"Snapshot: \" + snapshot.exists)\n//         netWorth = snapshot;\n//     });\n\nconst snapshot = firestore.collection('ticketreader/').get();\nsnapshot.then(snap => {\n    snap.forEach(doc => {\n        console.log(doc.id, '=>', doc.data())\n        netWorth = doc.data().netValue\n        console.log(netWorth)\n    })\n})\n\n\n\nexport default netWorth;\n// export default netWorth;"]},"metadata":{},"sourceType":"module"}